{
  "test_run_summary": {
    "timestamp": "2025-06-22T12:12:08.701332",
    "total_execution_time": 9.636220932006836,
    "total_test_suites": 7,
    "completed_test_suites": 7,
    "passed_test_suites": 6,
    "failed_test_suites": 1,
    "success_rate": 85.71428571428571
  },
  "test_results": {
    "test_end_to_end.py": {
      "status": "completed",
      "description": "End-to-End Workflow Tests",
      "return_code": 0,
      "execution_time": 8.234355926513672,
      "stdout": "\ud83c\udfaf END-TO-END TESTING FOR MAIN.PY\n================================================================================\nThis test validates the complete user workflow:\n1. \u2705 API Health & Connectivity\n2. \ud83d\udc64 User Registration/Login\n3. \ud83d\udd11 Session Management\n4. \ud83e\udde0 AI Form Filling (Demo & Authenticated)\n5. \ud83d\udcca URL Tracking & Management\n6. \ud83e\uddf9 Session Cleanup\n================================================================================\n\u2705 Server is running and healthy\n\ud83d\ude80 COMPREHENSIVE END-TO-END TEST SUITE\n================================================================================\nTesting against: http://localhost:8000\nTest User: e2e_test_20250622_121159@example.com\n================================================================================\n[12:11:59] \ud83d\udcdd \u2705 Test session initialized\n\n\ud83d\udccb Running 7 comprehensive tests...\n\n[12:11:59] \u2705 API Health Check: API healthy in 0.001s - Services: {'document_service': 'healthy', 'resume_extractor': 'cached', 'personal_info_extractor': 'cached', 'form_filler': 'cached'}\n[12:12:00] \u2705 User Registration: User registered successfully in 0.241s - ID: 5d59c11e-e709-440f-bce5-b59f3a41c7a6\n[12:12:00] \u2705 Session Creation: Session created in 0.008s - Session ID: 75b64e61...\n[12:12:04] \u2705 Demo Form Filling: Demo form filling working in 3.036s - Answer: 'My name is [Your Name], and I am thrilled to be ap...'\n[12:12:05] \u2705 Authenticated Form Filling: Authenticated form filling working in 1.240s - Answer: 'N/A...' (Source: generated)\n[12:12:06] \u2705 URL Tracking: URL tracking working in 0.014s - Total URLs: 1\n[12:12:06] \u2705 Session Cleanup: Session cleaned up in 0.005s\n\n================================================================================\n\ud83d\udcca END-TO-END TEST RESULTS SUMMARY\n================================================================================\n\n\ud83d\udcc8 TEST STATISTICS:\n   Total Tests: 7\n   Passed: 7 \u2705\n   Failed: 0 \u274c\n   Success Rate: 100.0%\n   Total Time: 8.05s\n\n\u26a1 PERFORMANCE METRICS:\n   Health Check: 1.5ms\n\n\ud83d\udccb TEST DETAILS:\n   \u2705 API Health Check\n   \u2705 User Registration\n   \u2705 Session Creation\n   \u2705 Demo Form Filling\n   \u2705 Authenticated Form Filling\n   \u2705 URL Tracking\n   \u2705 Session Cleanup\n\n\ud83c\udfaf OVERALL ASSESSMENT:\n   \ud83c\udfc6 EXCELLENT - System is production-ready!\n\n\ud83d\udcbe Detailed report saved to: e2e_test_report_20250622_121207.json\n================================================================================\n[12:12:07] \ud83d\udcdd \ud83e\uddf9 Test session cleaned up\n",
      "stderr": "",
      "success": true
    },
    "test_api.py": {
      "status": "completed",
      "description": "Basic API Functionality Tests",
      "return_code": 0,
      "execution_time": 0.1587226390838623,
      "stdout": "\ud83d\ude80 Smart Form Fill API v4.0 - Field-by-Field Test Suite\n============================================================\n\n\ud83c\udfe5 Testing health check...\n   \u2705 Status: healthy\n   \ud83d\udcca Services: {'document_service': 'healthy', 'resume_extractor': 'cached', 'personal_info_extractor': 'cached', 'form_filler': 'cached'}\n\n\ud83d\udccb Running 6 test cases...\n\n--- Test Case 1/6 ---\n\n\ud83c\udfaf Testing field: 'What is your full name?'\n   URL: https://example.com/job-application\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n--- Test Case 2/6 ---\n\n\ud83c\udfaf Testing field: 'What is your current occupation?'\n   URL: https://jobs.google.com/apply\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n--- Test Case 3/6 ---\n\n\ud83c\udfaf Testing field: 'What is your email address?'\n   URL: https://careers.microsoft.com/apply\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n--- Test Case 4/6 ---\n\n\ud83c\udfaf Testing field: 'What programming languages do you know?'\n   URL: https://careers.amazon.com/apply\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n--- Test Case 5/6 ---\n\n\ud83c\udfaf Testing field: 'Do you require visa sponsorship?'\n   URL: https://jobs.netflix.com/apply\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n--- Test Case 6/6 ---\n\n\ud83c\udfaf Testing field: 'Upload your resume'\n   URL: https://jobs.apple.com/apply\n   User ID: test-user\n   \u274c Error: HTTP 401\n   \ud83d\udcc4 Response: {\"detail\":\"No session ID provided\"}\n\n============================================================\n\ud83d\udcca Test Results: 0/6 passed\n\u26a0\ufe0f  Some tests failed. Please check the server logs.\n\n\ud83d\udd27 React Integration Example:\n\n    const handleFieldFill = async (fieldElement) => {\n      const label = getFieldLabel(fieldElement);\n      const url = window.location.href;\n      \n      try {\n        const response = await fetch('http://localhost:8000/api/generate-field-answer', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ label, url, user_id: 'your-user-id' })\n        });\n        \n        const data = await response.json();\n        fieldElement.value = data.answer || '\u26a0\ufe0f No answer';\n        \n      } catch (error) {\n        console.error('API Error:', error);\n        fieldElement.value = '\u26a0\ufe0f Backend error';\n      }\n    };\n    \n",
      "stderr": "",
      "success": true
    },
    "test_session_api.py": {
      "status": "completed",
      "description": "Session Management Tests",
      "return_code": 0,
      "execution_time": 0.3708457946777344,
      "stdout": "\ud83d\ude80 Starting Simple Session Management Tests...\n\ud83d\udd17 Testing against: http://localhost:8000\n\ud83d\udd11 Testing Simple Session Management API\n============================================================\n\n\ud83d\udcdd Step 1: Register User\n\u2705 User registered successfully!\n   \ud83d\udce7 Email: test_session_121207@example.com\n   \ud83c\udd94 User ID: 5078f229-99e3-4323-81c4-aef8166fb597\n\n\ud83d\udd11 Step 2: Create Session\n\u2705 Session created successfully!\n   \ud83c\udfab Session ID: 3e56a2bb-1dce-4bdd-be89-89868656b1ab\n   \ud83d\udcbe Store this session_id in browser extension storage\n\n\ud83d\udc64 Step 3: Get Current User Info\n\u2705 Current user retrieved successfully!\n   \ud83d\udce7 Email: test_session_121207@example.com\n   \ud83c\udd94 User ID: 5078f229-99e3-4323-81c4-aef8166fb597\n   \ud83c\udfab Session ID: 3e56a2bb-1dce-4bdd-be89-89868656b1ab\n   \ud83d\udcf1 Device: Chrome Extension v1.0 - Test Browser\n   \ud83d\udd50 Created: 2025-06-22T13:12:07.900134-04:00\n   \ud83d\udd50 Last Used: 2025-06-22T13:12:07.905297-04:00\n\n\ud83c\udfaf Step 4: Test Form Filling with User ID\n\u274c Field answer failed: 401\n   Error: {\"detail\":\"No session ID provided\"}\n\n\ud83d\udeaa Step 5: Logout Session\n\u2705 Session logged out successfully!\n   \ud83d\udcdd Status: deactivated\n   \ud83d\udcac Message: Session logged out successfully\n\n\ud83d\udeab Step 6: Test Deactivated Session\n\u2705 Deactivated session correctly rejected!\n   \ud83d\udcdd Status: 404\n\n============================================================\n\ud83c\udf10 Browser Extension Simulation\n============================================================\n\n\ud83d\udccb Browser Extension Implementation:\n\n// 1. One-time setup (when extension is installed)\nasync function setupUser() {\n    // Register user\n    const registerResponse = await fetch('/api/simple/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            email: 'user@example.com',\n            password: 'password123'\n        })\n    });\n    const userData = await registerResponse.json();\n    \n    // Create session\n    const sessionResponse = await fetch('/api/session/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            user_id: userData.user_id,\n            device_info: 'Chrome Extension v1.0'\n        })\n    });\n    const sessionData = await sessionResponse.json();\n    \n    // Store session_id permanently\n    chrome.storage.local.set({\n        session_id: sessionData.session_id,\n        user_id: userData.user_id\n    });\n}\n\n// 2. Get current user (when extension starts)\nasync function getCurrentUser() {\n    const { session_id } = await chrome.storage.local.get(['session_id']);\n    const response = await fetch(`/api/session/current/${session_id}`);\n    const user = await response.json();\n    return user;\n}\n\n// 3. Fill form fields (main functionality)\nasync function fillField(inputElement) {\n    const { user_id } = await chrome.storage.local.get(['user_id']);\n    \n    const response = await fetch('/api/generate-field-answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            label: inputElement.placeholder,\n            url: window.location.href,\n            user_id: user_id  // \u2190 Simple!\n        })\n    });\n    \n    const result = await response.json();\n    inputElement.value = result.answer;\n}\n    \n\n============================================================\n\ud83c\udf89 All tests completed!\n\ud83d\udca1 Your simple session management API is ready!\n============================================================\n",
      "stderr": "",
      "success": true
    },
    "test_upload_api.py": {
      "status": "completed",
      "description": "Document Upload & Management Tests",
      "return_code": 0,
      "execution_time": 0.15231895446777344,
      "stdout": "\ud83d\ude80 Starting Document Upload & CRUD API Tests\n\ud83d\udcdd Testing: ONE RESUME + ONE PERSONAL INFO PER USER\n============================================================\n\u2705 API is running and healthy\n\ud83e\uddea Testing Demo Resume Upload...\n\u274c Upload failed: 404\n   Error: {\"detail\":\"Not Found\"}\n\n\ud83e\uddea Testing Demo Personal Info Upload...\n\u274c Upload failed: 404\n   Error: {\"detail\":\"Not Found\"}\n\n\ud83e\uddea Testing Document Replacement...\n\u274c Replacement failed: 404\n\n\ud83e\uddea Testing Single Document Endpoints...\n\ud83d\udcc4 Testing resume replacement behavior...\n   \u274c First upload failed: 404\n\n\ud83e\uddea Testing Demo GET Requests...\n\ud83d\udcc4 Getting demo resume...\n\u26a0\ufe0f  No demo resume found - upload one first\n\n\ud83d\udcdd Getting demo personal info...\n\u26a0\ufe0f  No demo personal info found - upload one first\n\n\ud83e\uddea Testing Demo Documents Status...\n\u274c Status check failed: 404\n\n\ud83e\uddea Testing Demo Resume Download...\n\u26a0\ufe0f  No demo resume found for download - upload one first\n\n\ud83c\udf89 All tests completed!\n\n\ud83d\udccb Summary of New API Logic:\n   \u2022 ONE resume per user (replaces previous when uploading new)\n   \u2022 ONE personal info per user (replaces previous when uploading new)\n   \u2022 Simplified endpoints (no document IDs needed)\n   \u2022 Clear replacement indicators in responses\n   \u2022 Demo GET endpoints for easy testing\n\n\ud83d\udcd6 New Demo GET Endpoints:\n   \u2022 GET /api/demo/resume - Get demo resume info\n   \u2022 GET /api/demo/personal-info - Get demo personal info\n   \u2022 GET /api/demo/documents/status - Get demo documents status\n   \u2022 GET /api/demo/resume/download - Download demo resume\n\n\ud83d\udcd6 API Documentation available at: http://localhost:8000/docs\n",
      "stderr": "",
      "success": true
    },
    "test_vector_api.py": {
      "status": "completed",
      "description": "Vector Database & Embedding Tests",
      "return_code": 0,
      "execution_time": 0.14897727966308594,
      "stdout": "\ud83d\ude80 Vector Database API Tester\n============================================================\n\n\ud83d\udd17 Testing API connection...\n\u2705 API server is running!\n\n============================================================\n\ud83d\udcca API Information\n============================================================\n{\n  \"message\": \"Smart Form Fill API - OPTIMIZED VERSION\",\n  \"version\": \"4.1.0-optimized\",\n  \"status\": \"operational\",\n  \"performance_enhancements\": [\n    \"Singleton pattern with cached services\",\n    \"Connection pooling\",\n    \"Pre-warmed services\",\n    \"Optimized vector operations\",\n    \"Performance metrics tracking\"\n  ],\n  \"docs\": \"/docs\",\n  \"health\": \"/health\"\n}\n\n\ud83d\udcca Checking current vector database status...\n\n============================================================\n\ud83d\udcca Resume Database Status\n============================================================\n{\n  \"detail\": \"Not Found\"\n}\n\n============================================================\n\ud83d\udcca Personal Info Database Status\n============================================================\n{\n  \"detail\": \"Not Found\"\n}\n\n\ud83d\udd04 Testing re-embedding functionality...\n\n\ud83d\udcc4 Re-embedding personal info...\n\u274c Personal info re-embedding failed: {'detail': 'No session ID provided'}\n\n\ud83d\udcc4 Re-embedding resume...\n\u274c Resume re-embedding failed: {'detail': 'No session ID provided'}\n\n\ud83d\udd04 Testing batch re-embedding...\n\u274c Batch re-embedding failed: {'detail': 'Not Found'}\n\n============================================================\n\u2728 Vector Database API testing completed!\n\n\ud83d\udca1 Available endpoints:\n   \u2022 GET  /api/v1/resume/status\n   \u2022 POST /api/v1/resume/reembed\n   \u2022 POST /api/v1/resume/search?query=<query>&k=<num>\n   \u2022 GET  /api/v1/personal-info/status\n   \u2022 POST /api/v1/personal-info/reembed\n   \u2022 POST /api/v1/personal-info/search?query=<query>&k=<num>\n   \u2022 POST /api/v1/reembed-all\n",
      "stderr": "",
      "success": true
    },
    "test_extension_api.py": {
      "status": "completed",
      "description": "Browser Extension API Tests",
      "return_code": 0,
      "execution_time": 0.3830881118774414,
      "stdout": "\ud83e\uddea Extension API Test Suite\n============================================================\n\u2705 API server is running\n[12:12:08] INFO: \ud83d\ude80 Starting Extension API Tests...\n============================================================\n\n\ud83d\udccb Running test: API Health\n[12:12:08] INFO: Testing API health...\n[12:12:08] SUCCESS: \u2705 API is healthy: {'status': 'healthy', 'version': '4.1.0-optimized', 'timestamp': '2025-06-22T12:12:08.352825', 'services': {'document_service': 'healthy', 'resume_extractor': 'cached', 'personal_info_extractor': 'cached', 'form_filler': 'cached'}, 'optimization_status': 'enabled'}\n[12:12:08] SUCCESS: \u2705 API Health: PASSED\n\n\ud83d\udccb Running test: User Registration\n[12:12:08] INFO: Testing user registration with email: test_extension_121208@example.com\n[12:12:08] SUCCESS: \u2705 User registered successfully: 86147252-1a5f-4c7f-9157-d97413ab117f\n[12:12:08] SUCCESS: \u2705 User Registration: PASSED\n\n\ud83d\udccb Running test: Session Creation\n[12:12:08] INFO: Testing session creation...\n[12:12:08] SUCCESS: \u2705 Session created: e1c0ddbc-67b5-405d-9551-a386b07e23c1\n[12:12:08] SUCCESS: \u2705 Session Creation: PASSED\n\n\ud83d\udccb Running test: Save Current Page\n[12:12:08] INFO: Testing save current page...\n[12:12:08] SUCCESS: \u2705 Page saved successfully: URL saved successfully\n[12:12:08] SUCCESS: \u2705 Save Current Page: PASSED\n\n\ud83d\udccb Running test: URL Statistics\n[12:12:08] INFO: Testing URL statistics...\n[12:12:08] SUCCESS: \u2705 URL stats retrieved:\n[12:12:08] INFO:    Total URLs: 1\n[12:12:08] INFO:    Applied: 0\n[12:12:08] INFO:    In Progress: 0\n[12:12:08] INFO:    Not Applied: 1\n[12:12:08] SUCCESS: \u2705 URL Statistics: PASSED\n\n\ud83d\udccb Running test: AI Form Filling\n[12:12:08] INFO: Testing AI form filling...\n[12:12:08] ERROR: \u274c Form filling failed: 401 - {\"detail\":\"No session ID provided\"}\n[12:12:08] ERROR: \u274c AI Form Filling: FAILED\n\n============================================================\n[12:12:08] INFO: \ud83c\udfaf Test Results: 5/6 tests passed\n[12:12:08] ERROR: \ud83d\udca5 Some tests failed!\n\n\ud83d\udca5 Some API endpoints are not working!\n\ud83d\udd27 Check your backend logs for errors\n",
      "stderr": "",
      "success": true
    },
    "test_enhanced_form_filler.py": {
      "status": "completed",
      "description": "Enhanced Form Filling Tests",
      "return_code": 1,
      "execution_time": 0.08388090133666992,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/Users/macbookpro/M4_Projects/AIEngineer/backend_ai_popup/tests/test_enhanced_form_filler.py\", line 9, in <module>\n    from app.services.form_filler import FormFiller\nModuleNotFoundError: No module named 'app'\n",
      "success": false
    }
  },
  "system_info": {
    "python_version": "3.11.4 (v3.11.4:d2340ef257, Jun  6 2023, 19:15:51) [Clang 13.0.0 (clang-1300.0.29.30)]",
    "working_directory": "/Users/macbookpro/M4_Projects/AIEngineer/backend_ai_popup",
    "test_runner_version": "1.0.0"
  }
}