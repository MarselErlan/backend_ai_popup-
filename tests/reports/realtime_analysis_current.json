{
  "timestamp": "2025-06-23T02:47:56.893278",
  "analysis_duration_minutes": 0.06560655037562052,
  "monitoring_summary": {
    "total_endpoints_monitored": 0,
    "total_requests_captured": 0,
    "monitoring_duration_minutes": 0.06560655037562052
  },
  "deep_tracking": {
    "detailed_function_calls": 12,
    "execution_traces": [],
    "active_requests": 0,
    "recent_function_calls": [
      {
        "function_name": "mock_generate_field_answer",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.22892117500305176,
        "memory_usage": 86794240,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664861.745888
      },
      {
        "function_name": "mock_generate_field_answer",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.13489985466003418,
        "memory_usage": 86798336,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664862.387423
      },
      {
        "function_name": "mock_extract_personal_info",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.6022529602050781,
        "memory_usage": 86802432,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664863.494526
      },
      {
        "function_name": "mock_generate_field_answer",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.5021660327911377,
        "memory_usage": 90095616,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664873.4700491
      },
      {
        "function_name": "mock_vector_search",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.18503379821777344,
        "memory_usage": 90095616,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664874.160654
      },
      {
        "function_name": "mock_generate_field_answer",
        "file_name": "realtime_usage_analyzer.py",
        "execution_time": 0.11377406120300293,
        "memory_usage": 90095616,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664874.7774231
      },
      {
        "function_name": "mock_api_call",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.10503411293029785,
        "memory_usage": 90099712,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.065824
      },
      {
        "function_name": "mock_data_processing",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.20503878593444824,
        "memory_usage": 90099712,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.271264
      },
      {
        "function_name": "mock_api_call",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.10306000709533691,
        "memory_usage": 90099712,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.374806
      },
      {
        "function_name": "mock_data_processing",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.20502495765686035,
        "memory_usage": 90099712,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.5802681
      },
      {
        "function_name": "mock_api_call",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.10503172874450684,
        "memory_usage": 90443776,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.687024
      },
      {
        "function_name": "mock_data_processing",
        "file_name": "test_manual_monitor_simulation.py",
        "execution_time": 0.20004892349243164,
        "memory_usage": 90443776,
        "cpu_usage": 0.0,
        "success": true,
        "timestamp": 1750664875.887455
      }
    ]
  },
  "endpoint_usage": [],
  "database_analysis": {
    "endpoint_statistics": [
      {
        "endpoint": "POST /api/v1/resume",
        "total_calls": 1,
        "avg_response_time": 0.0019180774688720703,
        "min_response_time": 0.0019180774688720703,
        "max_response_time": 0.0019180774688720703
      }
    ],
    "total_recorded_calls": 1
  },
  "performance_insights": {
    "slow_endpoints": [],
    "high_traffic_endpoints": [],
    "error_prone_endpoints": []
  },
  "generate_field_answer_analysis": {
    "endpoint": "POST /api/generate-field-answer",
    "total_functions_involved": 25,
    "function_categories": {
      "endpoint": [
        {
          "name": "main.generate_field_answer",
          "category": "endpoint",
          "file": "main.py",
          "description": "Main FastAPI endpoint handler",
          "line": 258,
          "dependencies": [
            "get_session_user",
            "get_smart_llm_service"
          ]
        }
      ],
      "authentication": [
        {
          "name": "main.get_session_user",
          "category": "authentication",
          "file": "main.py",
          "description": "Session-based user authentication",
          "line": 67,
          "dependencies": [
            "get_db",
            "User.model_validation"
          ]
        },
        {
          "name": "db.session.get_db",
          "category": "authentication",
          "file": "db/session.py",
          "description": "Database session management",
          "line": "N/A",
          "dependencies": []
        }
      ],
      "service_init": [
        {
          "name": "main.get_smart_llm_service",
          "category": "service_init",
          "file": "main.py",
          "description": "Smart LLM service factory",
          "line": 147,
          "dependencies": [
            "SmartLLMService.__init__"
          ]
        },
        {
          "name": "SmartLLMService.__init__",
          "category": "service_init",
          "file": "app/services/llm_service.py",
          "description": "Initialize Smart LLM service",
          "line": 62,
          "dependencies": [
            "EmbeddingService.__init__",
            "RedisVectorStore.__init__",
            "DocumentService.__init__"
          ]
        },
        {
          "name": "EmbeddingService.__init__",
          "category": "service_init",
          "file": "app/services/embedding_service.py",
          "description": "Initialize embedding service",
          "line": "N/A",
          "dependencies": [
            "RedisVectorStore.__init__"
          ]
        },
        {
          "name": "RedisVectorStore.__init__",
          "category": "service_init",
          "file": "app/services/vector_store.py",
          "description": "Initialize Redis vector store",
          "line": "N/A",
          "dependencies": []
        },
        {
          "name": "DocumentService.__init__",
          "category": "service_init",
          "file": "app/services/document_service.py",
          "description": "Initialize document service",
          "line": "N/A",
          "dependencies": []
        }
      ],
      "tool_setup": [
        {
          "name": "SmartLLMService._setup_tools",
          "category": "tool_setup",
          "file": "app/services/llm_service.py",
          "description": "Setup LangChain tools",
          "line": 99,
          "dependencies": [
            "search_resume_data",
            "search_personal_info"
          ]
        },
        {
          "name": "SmartLLMService._setup_graph",
          "category": "tool_setup",
          "file": "app/services/llm_service.py",
          "description": "Setup LangGraph workflow",
          "line": 164,
          "dependencies": [
            "agent_node",
            "should_continue",
            "extract_final_answer"
          ]
        }
      ],
      "core_processing": [
        {
          "name": "SmartLLMService.generate_field_answer",
          "category": "core_processing",
          "file": "app/services/llm_service.py",
          "description": "Main LLM processing function",
          "line": 238,
          "dependencies": [
            "_search_resume_vectors",
            "_search_personal_vectors",
            "_clean_answer"
          ]
        },
        {
          "name": "SmartLLMService._search_resume_vectors",
          "category": "core_processing",
          "file": "app/services/llm_service.py",
          "description": "Search resume vector database",
          "line": 401,
          "dependencies": [
            "EmbeddingService.search_similar_by_document_type"
          ]
        },
        {
          "name": "SmartLLMService._search_personal_vectors",
          "category": "core_processing",
          "file": "app/services/llm_service.py",
          "description": "Search personal info vector database",
          "line": 419,
          "dependencies": [
            "EmbeddingService.search_similar_by_document_type"
          ]
        }
      ],
      "vector_search": [
        {
          "name": "EmbeddingService.search_similar_by_document_type",
          "category": "vector_search",
          "file": "app/services/embedding_service.py",
          "description": "Vector similarity search",
          "line": "N/A",
          "dependencies": [
            "RedisVectorStore.search_similar",
            "generate_embedding"
          ]
        },
        {
          "name": "RedisVectorStore.search_similar",
          "category": "vector_search",
          "file": "app/services/vector_store.py",
          "description": "Redis vector search",
          "line": "N/A",
          "dependencies": [
            "_execute_search",
            "_parse_results"
          ]
        },
        {
          "name": "RedisVectorStore._execute_search",
          "category": "vector_search",
          "file": "app/services/vector_store.py",
          "description": "Execute Redis FT.SEARCH",
          "line": "N/A",
          "dependencies": []
        },
        {
          "name": "RedisVectorStore._parse_results",
          "category": "vector_search",
          "file": "app/services/vector_store.py",
          "description": "Parse Redis search results",
          "line": "N/A",
          "dependencies": []
        }
      ],
      "llm_processing": [
        {
          "name": "ChatOpenAI.invoke",
          "category": "llm_processing",
          "file": "langchain_openai",
          "description": "OpenAI LLM invocation",
          "line": "N/A",
          "dependencies": []
        }
      ],
      "post_processing": [
        {
          "name": "SmartLLMService._clean_answer",
          "category": "post_processing",
          "file": "app/services/llm_service.py",
          "description": "Clean and process LLM response",
          "line": 453,
          "dependencies": [
            "meta_response_detection",
            "field_extraction",
            "text_cleaning"
          ]
        }
      ],
      "response": [
        {
          "name": "FieldAnswerResponse",
          "category": "response",
          "file": "main.py",
          "description": "Response model creation",
          "line": 290,
          "dependencies": []
        }
      ],
      "tracking": [
        {
          "name": "track_class_creation",
          "category": "tracking",
          "file": "app/services/integrated_usage_analyzer.py",
          "description": "Track class instantiation",
          "line": "N/A",
          "dependencies": []
        },
        {
          "name": "track_service_call",
          "category": "tracking",
          "file": "app/services/integrated_usage_analyzer.py",
          "description": "Track service method calls",
          "line": "N/A",
          "dependencies": []
        },
        {
          "name": "track_method_call",
          "category": "tracking",
          "file": "app/services/integrated_usage_analyzer.py",
          "description": "Track method invocations",
          "line": "N/A",
          "dependencies": []
        }
      ],
      "utility": [
        {
          "name": "logger.info",
          "category": "utility",
          "file": "app/utils/logger.py",
          "description": "Structured logging",
          "line": "N/A",
          "dependencies": []
        },
        {
          "name": "logger.error",
          "category": "utility",
          "file": "app/utils/logger.py",
          "description": "Error logging",
          "line": "N/A",
          "dependencies": []
        }
      ]
    },
    "execution_flow": [
      {
        "step": 1,
        "function": "main.generate_field_answer",
        "category": "endpoint",
        "file": "main.py",
        "description": "Main FastAPI endpoint handler",
        "dependencies": [
          "get_session_user",
          "get_smart_llm_service"
        ]
      },
      {
        "step": 2,
        "function": "main.get_session_user",
        "category": "authentication",
        "file": "main.py",
        "description": "Session-based user authentication",
        "dependencies": [
          "get_db",
          "User.model_validation"
        ]
      },
      {
        "step": 3,
        "function": "db.session.get_db",
        "category": "authentication",
        "file": "db/session.py",
        "description": "Database session management",
        "dependencies": []
      },
      {
        "step": 4,
        "function": "main.get_smart_llm_service",
        "category": "service_init",
        "file": "main.py",
        "description": "Smart LLM service factory",
        "dependencies": [
          "SmartLLMService.__init__"
        ]
      },
      {
        "step": 5,
        "function": "SmartLLMService.__init__",
        "category": "service_init",
        "file": "app/services/llm_service.py",
        "description": "Initialize Smart LLM service",
        "dependencies": [
          "EmbeddingService.__init__",
          "RedisVectorStore.__init__",
          "DocumentService.__init__"
        ]
      },
      {
        "step": 6,
        "function": "EmbeddingService.__init__",
        "category": "service_init",
        "file": "app/services/embedding_service.py",
        "description": "Initialize embedding service",
        "dependencies": [
          "RedisVectorStore.__init__"
        ]
      },
      {
        "step": 7,
        "function": "RedisVectorStore.__init__",
        "category": "service_init",
        "file": "app/services/vector_store.py",
        "description": "Initialize Redis vector store",
        "dependencies": []
      },
      {
        "step": 8,
        "function": "DocumentService.__init__",
        "category": "service_init",
        "file": "app/services/document_service.py",
        "description": "Initialize document service",
        "dependencies": []
      },
      {
        "step": 9,
        "function": "SmartLLMService._setup_tools",
        "category": "tool_setup",
        "file": "app/services/llm_service.py",
        "description": "Setup LangChain tools",
        "dependencies": [
          "search_resume_data",
          "search_personal_info"
        ]
      },
      {
        "step": 10,
        "function": "SmartLLMService._setup_graph",
        "category": "tool_setup",
        "file": "app/services/llm_service.py",
        "description": "Setup LangGraph workflow",
        "dependencies": [
          "agent_node",
          "should_continue",
          "extract_final_answer"
        ]
      },
      {
        "step": 11,
        "function": "SmartLLMService.generate_field_answer",
        "category": "core_processing",
        "file": "app/services/llm_service.py",
        "description": "Main LLM processing function",
        "dependencies": [
          "_search_resume_vectors",
          "_search_personal_vectors",
          "_clean_answer"
        ]
      },
      {
        "step": 12,
        "function": "SmartLLMService._search_resume_vectors",
        "category": "core_processing",
        "file": "app/services/llm_service.py",
        "description": "Search resume vector database",
        "dependencies": [
          "EmbeddingService.search_similar_by_document_type"
        ]
      },
      {
        "step": 13,
        "function": "SmartLLMService._search_personal_vectors",
        "category": "core_processing",
        "file": "app/services/llm_service.py",
        "description": "Search personal info vector database",
        "dependencies": [
          "EmbeddingService.search_similar_by_document_type"
        ]
      },
      {
        "step": 14,
        "function": "EmbeddingService.search_similar_by_document_type",
        "category": "vector_search",
        "file": "app/services/embedding_service.py",
        "description": "Vector similarity search",
        "dependencies": [
          "RedisVectorStore.search_similar",
          "generate_embedding"
        ]
      },
      {
        "step": 15,
        "function": "RedisVectorStore.search_similar",
        "category": "vector_search",
        "file": "app/services/vector_store.py",
        "description": "Redis vector search",
        "dependencies": [
          "_execute_search",
          "_parse_results"
        ]
      },
      {
        "step": 16,
        "function": "RedisVectorStore._execute_search",
        "category": "vector_search",
        "file": "app/services/vector_store.py",
        "description": "Execute Redis FT.SEARCH",
        "dependencies": []
      },
      {
        "step": 17,
        "function": "RedisVectorStore._parse_results",
        "category": "vector_search",
        "file": "app/services/vector_store.py",
        "description": "Parse Redis search results",
        "dependencies": []
      },
      {
        "step": 18,
        "function": "ChatOpenAI.invoke",
        "category": "llm_processing",
        "file": "langchain_openai",
        "description": "OpenAI LLM invocation",
        "dependencies": []
      },
      {
        "step": 19,
        "function": "SmartLLMService._clean_answer",
        "category": "post_processing",
        "file": "app/services/llm_service.py",
        "description": "Clean and process LLM response",
        "dependencies": [
          "meta_response_detection",
          "field_extraction",
          "text_cleaning"
        ]
      },
      {
        "step": 20,
        "function": "FieldAnswerResponse",
        "category": "response",
        "file": "main.py",
        "description": "Response model creation",
        "dependencies": []
      },
      {
        "step": 21,
        "function": "track_class_creation",
        "category": "tracking",
        "file": "app/services/integrated_usage_analyzer.py",
        "description": "Track class instantiation",
        "dependencies": []
      },
      {
        "step": 22,
        "function": "track_service_call",
        "category": "tracking",
        "file": "app/services/integrated_usage_analyzer.py",
        "description": "Track service method calls",
        "dependencies": []
      },
      {
        "step": 23,
        "function": "track_method_call",
        "category": "tracking",
        "file": "app/services/integrated_usage_analyzer.py",
        "description": "Track method invocations",
        "dependencies": []
      },
      {
        "step": 24,
        "function": "logger.info",
        "category": "utility",
        "file": "app/utils/logger.py",
        "description": "Structured logging",
        "dependencies": []
      },
      {
        "step": 25,
        "function": "logger.error",
        "category": "utility",
        "file": "app/utils/logger.py",
        "description": "Error logging",
        "dependencies": []
      }
    ],
    "performance_breakdown": {
      "endpoint": {
        "function_count": 1,
        "percentage": 4.0
      },
      "authentication": {
        "function_count": 2,
        "percentage": 8.0
      },
      "service_init": {
        "function_count": 5,
        "percentage": 20.0
      },
      "tool_setup": {
        "function_count": 2,
        "percentage": 8.0
      },
      "core_processing": {
        "function_count": 3,
        "percentage": 12.0
      },
      "vector_search": {
        "function_count": 4,
        "percentage": 16.0
      },
      "llm_processing": {
        "function_count": 1,
        "percentage": 4.0
      },
      "post_processing": {
        "function_count": 1,
        "percentage": 4.0
      },
      "response": {
        "function_count": 1,
        "percentage": 4.0
      },
      "tracking": {
        "function_count": 3,
        "percentage": 12.0
      },
      "utility": {
        "function_count": 2,
        "percentage": 8.0
      }
    },
    "dependency_graph": {
      "main.generate_field_answer": [
        "get_session_user",
        "get_smart_llm_service"
      ],
      "main.get_session_user": [
        "get_db",
        "User.model_validation"
      ],
      "db.session.get_db": [],
      "main.get_smart_llm_service": [
        "SmartLLMService.__init__"
      ],
      "SmartLLMService.__init__": [
        "EmbeddingService.__init__",
        "RedisVectorStore.__init__",
        "DocumentService.__init__"
      ],
      "EmbeddingService.__init__": [
        "RedisVectorStore.__init__"
      ],
      "RedisVectorStore.__init__": [],
      "DocumentService.__init__": [],
      "SmartLLMService._setup_tools": [
        "search_resume_data",
        "search_personal_info"
      ],
      "SmartLLMService._setup_graph": [
        "agent_node",
        "should_continue",
        "extract_final_answer"
      ],
      "SmartLLMService.generate_field_answer": [
        "_search_resume_vectors",
        "_search_personal_vectors",
        "_clean_answer"
      ],
      "SmartLLMService._search_resume_vectors": [
        "EmbeddingService.search_similar_by_document_type"
      ],
      "SmartLLMService._search_personal_vectors": [
        "EmbeddingService.search_similar_by_document_type"
      ],
      "EmbeddingService.search_similar_by_document_type": [
        "RedisVectorStore.search_similar",
        "generate_embedding"
      ],
      "RedisVectorStore.search_similar": [
        "_execute_search",
        "_parse_results"
      ],
      "RedisVectorStore._execute_search": [],
      "RedisVectorStore._parse_results": [],
      "ChatOpenAI.invoke": [],
      "SmartLLMService._clean_answer": [
        "meta_response_detection",
        "field_extraction",
        "text_cleaning"
      ],
      "FieldAnswerResponse": [],
      "track_class_creation": [],
      "track_service_call": [],
      "track_method_call": [],
      "logger.info": [],
      "logger.error": []
    },
    "complexity_analysis": {
      "total_layers": 11,
      "max_dependency_depth": 4,
      "most_complex_category": "service_init"
    }
  },
  "discovered_code": {
    "total_functions": 519,
    "total_classes": 93,
    "total_endpoints": 0,
    "functions": [
      "conftest.sample_text_file",
      "demo_integrated_analysis.main",
      "integrated_usage_analyzer.record_detailed_function_call",
      "postgres_service.update_form_analysis_status",
      "conftest.pytest_configure",
      "test_sample_pytest.test_parametrized",
      "test_end_to_end.__init__",
      "toggle_analysis.main",
      "form_filler_optimized._create_optimized_prompt",
      "cache_analytics_demo.log_cache_analysis",
      "test_end_to_end._create_sample_resume",
      "integrated_usage_analyzer._save_detailed_calls_to_db",
      "realtime_usage_analyzer.save_report",
      "test_improved_chunking.test_contact_info_chunking",
      "run_all_tests.run_quick_tests",
      "demo_chunking_example.demo_contact_info_specific",
      "integrated_usage_analyzer._get_generate_field_answer_functions",
      "conftest.authenticated_user",
      "demo_function_class_tracking.run_function_demos",
      "form_filler_cache_analytics.log_cache_analysis",
      "auth.get_current_user_id",
      "realtime_usage_analyzer.main",
      "integrated_usage_analyzer._analyze_python_file",
      "realtime_usage_analyzer.__init__",
      "form_filler_optimized._log_satisfaction_decision",
      "test_url_tracking_api.main",
      "demo_deep_tracking.slow_database_query",
      "llm_service._setup_graph",
      "test_end_to_end.log",
      "postgres_service.__init__",
      "integrated_usage_analyzer.get_depth",
      "cache_analytics_demo.simulate_field_request",
      "test_realtime_monitoring.test_function_1",
      "test_upload_api.test_demo_resume_upload",
      "integrated_usage_analyzer.get_analyzer",
      "conftest.get_metrics",
      "resume_extractor_db.create_faiss_vectorstore",
      "demo_function_class_tracking.fetch_user_data",
      "conftest.cleanup_test_files",
      "form_filler_optimized.__init__",
      "text_extractor.extract_from_pdf",
      "url_tracking_service._convert_to_response",
      "test_extension_api.__init__",
      "form_filler_optimized.extract_answer_from_combined_data",
      "integrated_usage_analyzer._serialize_class_usage",
      "conftest.sample_pdf_file",
      "test_upload_api.test_reembed_documents",
      "models.verify_password",
      "quick_test.test_function_slow",
      "realtime_usage_analyzer._extract_endpoint_path",
      "cleanup_old_analysis_reports.main",
      "usage_decorators.track_model_class",
      "integrated_usage_analyzer._serialize_function_usage",
      "integrated_usage_analyzer._generate_html_report",
      "conftest.performance_tracker",
      "auth.create_access_token",
      "form_filler_optimized._get_document_service",
      "performance_monitor.__post_init__",
      "conftest.put",
      "test_vector_api.test_connection",
      "conftest.test_execution_tracker",
      "form_filler_optimized._log_detailed_cache_performance",
      "test_main_comprehensive.get_unused_functions",
      "realtime_usage_analyzer._generate_field_answer_detailed_analysis",
      "form_filler._assess_data_completeness",
      "conftest.mock_db_session",
      "test_improved_chunking.main",
      "form_filler_optimized.get_performance_metrics",
      "usage_decorators.track_class",
      "test_sample_pytest.test_with_fixture",
      "test_api.test_health_check",
      "user_models.__repr__",
      "usage_middleware.__init__",
      "cache_analytics_demo.main",
      "show_deep_tracking.main",
      "test_improved_chunking.test_improved_chunking",
      "start_server_and_monitor.cleanup",
      "run_all_tests.main",
      "integrated_usage_analyzer.deep_track_function",
      "realtime_usage_analyzer.init_database",
      "user_models.set_password",
      "personal_info_extractor_optimized.process_personal_info_optimized",
      "conftest.server_health_check",
      "personal_info_extractor_optimized.document_service",
      "llm_service.__init__",
      "usage_decorators.record_function_call",
      "deploy.create_database",
      "conftest.test_user_data",
      "test_realtime_monitoring.test_function_3",
      "usage_decorators.track_api_function",
      "realtime_usage_analyzer._generate_html_report",
      "integrated_usage_analyzer._cleanup_old_backups",
      "url_tracking_service.save_url",
      "migrate_personal_info_table.migrate",
      "llm_service.agent_node",
      "models.set_password",
      "embedding_service.get_document_stats",
      "debug_manual_usage.main",
      "simple_function_tracker.tracked_init",
      "test_sample_pytest.test_temp_file_fixture",
      "simple_function_tracker.wrapper",
      "conftest.post",
      "realtime_usage_analyzer.stop_monitoring",
      "run_tests.check_requirements",
      "test_manual_monitor_simulation.mock_api_call",
      "test_extension_api.test_form_filling",
      "final_test_summary._generate_recommendations",
      "test_sample_pytest.module_specific_fixture",
      "realtime_usage_analyzer.generate_report",
      "integrated_usage_analyzer.stop_analysis",
      "detailed_code_analysis.get_unused_functions",
      "usage_decorators.track_service_function",
      "conftest.mock_session",
      "vector_store.store_embeddings",
      "resume_extractor_optimized.save_to_vectordb_optimized",
      "realtime_usage_analyzer._calculate_max_dependency_depth",
      "llm_service.get_performance_stats",
      "test_realtime_monitoring.test_function_2",
      "conftest.mock_embedding_response",
      "test_ctrl_c_scenario.slow_operation",
      "demo.main",
      "integrated_usage_analyzer.stop_monitoring",
      "demo_analyzer.demo_mini_report",
      "conftest.event_loop",
      "test_sample_pytest.test_exception_handling",
      "postgres_service.add_form_url",
      "test_main_comprehensive.__init__",
      "test_vector_api.reembed_resume",
      "realtime_usage_analyzer.generate_mini_report",
      "embedding_service._split_by_sentences",
      "test_sample_pytest.test_api_health_check",
      "test_sample_pytest.test_root_endpoint",
      "vector_store._create_index",
      "test_enhanced_tracking.test_enhanced_tracking",
      "database.create_tables",
      "form_filler_optimized._generate_personal_info_search_queries",
      "session.get_db",
      "test_url_tracking_api.__init__",
      "run_tests.main",
      "personal_info_extractor_db.process_personal_info",
      "test_sample_pytest.test_performance_tracking",
      "form_filler_optimized.determine_data_source",
      "integrated_usage_analyzer.start_monitoring",
      "realtime_usage_analyzer._periodic_analysis",
      "realtime_usage_analyzer.mock_generate_field_answer",
      "test_url_tracking_api.test_save_urls",
      "resume_extractor_optimized.main",
      "run_all_tests.run_ci_tests",
      "resume_extractor_db.process_resume",
      "toggle_analysis.toggle_analysis",
      "embedding_service.process_document",
      "postgres_service.get_session",
      "test_api.test_field_answer",
      "run_all_tests.run_pytest_command",
      "run_all_tests.check_dependencies",
      "form_filler_cache_analytics._get_cache_analytics",
      "embedding_service._chunk_text",
      "detailed_code_analysis._analyze_functions",
      "integrated_usage_analyzer.wrapper",
      "detailed_code_analysis._analyze_endpoints",
      "document_service.get_documents_status",
      "realtime_usage_analyzer._extract_endpoint_path_from_call",
      "usage_decorators.record_method_call",
      "test_upload_api.test_upload_replacement",
      "auto_tracker.get_analyzer",
      "run_tests.start_server",
      "integrated_usage_analyzer._generate_report",
      "resume_extractor_optimized._init_embedding_provider",
      "integrated_usage_analyzer.record_function_call",
      "llm_service.extract_final_answer",
      "embedding_service._chunk_by_characters",
      "integrated_usage_analyzer._serialize_endpoint_usage",
      "test_chunking_demo.test_old_vs_new_chunking",
      "cache_analytics_demo.show_performance_summary",
      "vector_store.__init__",
      "demo_deep_tracking.api_endpoint_handler",
      "run_all_tests.generate_consolidated_report",
      "test_upload_api.test_demo_documents_status",
      "test_upload_api.test_document_status",
      "migrate_personal_info_table.table_exists",
      "personal_info_extractor_db.split_documents",
      "document_service.get_user_personal_info_documents",
      "test_monitor_command.main",
      "start_server_and_monitor.main",
      "test_upload_api.main",
      "debug_manual_usage.debug_monitor_process",
      "test_monitor_command.run_analyzer",
      "cleanup_old_analysis_reports.cleanup_analysis_reports",
      "conftest.pytest_collection_modifyitems",
      "text_extractor.extract_from_txt",
      "test_url_tracking_api.test_get_urls",
      "models.__repr__",
      "form_filler_optimized._parse_llm_response",
      "test_personal_info_chunking.test_work_authorization_chunking",
      "realtime_usage_analyzer._monitor_api_endpoints",
      "cleanup_old_analysis_reports.show_current_reports",
      "resume_extractor_optimized.load_resume_from_database_optimized",
      "personal_info_extractor_optimized.get_performance_metrics",
      "test_vector_api.search_personal_info",
      "integrated_usage_analyzer._init_database",
      "test_sample_pytest.setup_method",
      "demo_chunking_example.demo_user_example",
      "simple_function_tracker.track_class_creation",
      "resume_extractor_db.create_embeddings_with_langchain",
      "url_tracking_service.get_url_by_id",
      "realtime_usage_analyzer.discover_code_structure",
      "migrate_files_to_db.migrate_resume_files",
      "conftest.mock_user",
      "llm_service.search_personal_info",
      "personal_info_extractor_db.save_to_vectordb",
      "conftest.sample_resume_text",
      "run_all_tests.run_tests_by_category",
      "run_all_tests.log",
      "performance_monitor.save_report",
      "test_extension_api.log",
      "logger.configure_logger",
      "main.get_personal_info_extractor",
      "quick_test.main",
      "usage_decorators.track_function",
      "embedding_service._get_embeddings",
      "migrate_files_to_db.main",
      "test_manual_monitor_simulation.simulate_manual_monitor",
      "test_sample_pytest.test_setup_data",
      "user_models.verify_password",
      "form_filler_optimized.calculate_combined_satisfaction_score",
      "test_vector_api.get_api_info",
      "vector_store.search_similar",
      "realtime_usage_analyzer.mock_vector_search",
      "test_vector_api.__init__",
      "auto_tracker._should_patch_function",
      "test_main_comprehensive.analyze_code",
      "test_api.main",
      "integrated_usage_analyzer._discover_code_structure",
      "test_personal_info_chunking.main",
      "demo_function_class_tracking.calculate_sum",
      "url_tracking_endpoints.get_session_user",
      "document_service.log_processing_start",
      "create_url_tracking_table.create_url_tracking_table",
      "embedding_service.search_similar_by_document_type",
      "demo_analyzer.demo_code_discovery",
      "detailed_code_analysis.print_detailed_report",
      "deploy.main",
      "auto_tracker.disable_auto_tracking",
      "test_upload_api.test_demo_get_documents",
      "test_extension_api.run_all_tests",
      "test_url_tracking_api.get_headers",
      "test_upload_api.test_single_document_endpoints",
      "schemas.validate_status",
      "test_ctrl_c_scenario.process_data",
      "realtime_usage_analyzer._define_generate_field_answer_functions",
      "test_monitor_quick.test_monitor_coordination",
      "usage_decorators._track_method",
      "usage_decorators.record_class_instantiation",
      "detailed_code_analysis._analyze_classes",
      "integrated_usage_analyzer.record_class_instantiation",
      "llm_service._setup_tools",
      "main.get_document_service",
      "document_service.save_personal_info_document",
      "create_tables.create_tables",
      "demo_function_class_tracking.get_stats",
      "personal_info_extractor_optimized.__init__",
      "conftest.delete",
      "database.get_db",
      "url_tracking_service.extract_domain",
      "auto_tracker.wrapper",
      "test_monitor_command.background_task_2",
      "test_upload_api.test_field_answer",
      "personal_info_extractor_db.search_personal_info",
      "integrated_usage_analyzer.record_method_call",
      "run_all_tests.__init__",
      "demo_function_class_tracking.process_text",
      "resume_extractor_optimized.search_resume",
      "document_service.get_personal_info_document",
      "final_test_summary.__init__",
      "test_vector_api.get_resume_status",
      "cache_analytics_demo.__init__",
      "vector_store.health_check",
      "simple_function_tracker.track_function",
      "test_sample_pytest.test_module_fixture",
      "auto_tracker._format_args",
      "personal_info_extractor_optimized.search_personal_info",
      "run_all_tests.save_consolidated_report",
      "form_filler_cache_analytics._log_performance_report",
      "document_service.get_document_stats",
      "form_filler_optimized._assess_data_completeness_optimized",
      "url_tracking_service.update_url_status",
      "auto_tracker.enable_auto_tracking",
      "conftest.end_timer",
      "resume_extractor_db.search_resume",
      "document_service.get_user_resume_documents",
      "demo_analyzer.demo_report_generation",
      "realtime_usage_analyzer._monitor_system_metrics",
      "main.get_resume_extractor",
      "conftest.mock_openai_response",
      "realtime_usage_analyzer._record_endpoint_usage",
      "personal_info_extractor_db.create_faiss_vectorstore",
      "test_vector_api.reembed_all",
      "url_tracking_service.__init__",
      "resume_extractor_optimized.clear_cache",
      "start_server_and_monitor.check_server_running",
      "test_sample_pytest.test_modify_data",
      "integrated_usage_analyzer._save_report",
      "vector_store.search_similar_by_document_type",
      "migrate_personal_info_schema.rollback_migration",
      "url_tracking_service.get_user_urls",
      "test_extension_api.main",
      "test_realtime_monitoring.main",
      "conftest.mock_document_service",
      "test_sample_pytest.test_basic_functionality",
      "realtime_usage_analyzer._generate_performance_insights",
      "resume_extractor_optimized.__init__",
      "test_extension_api.test_url_stats",
      "form_filler_cache_analytics.__init__",
      "test_manual_monitor_simulation.test_with_mock_functions",
      "personal_info_extractor_optimized.save_to_vectordb_optimized",
      "test_upload_api.test_demo_download",
      "form_filler_optimized._log_cache_efficiency_report",
      "form_filler_optimized._calculate_cache_hit_rate",
      "detailed_code_analysis.analyze",
      "realtime_usage_analyzer._cleanup_old_backups",
      "realtime_usage_analyzer.mock_extract_personal_info",
      "realtime_usage_analyzer.start_monitoring",
      "test_monitor_with_data.test_monitor_with_data",
      "test_sample_pytest.test_with_mock_patch",
      "conftest.temp_directory",
      "realtime_usage_analyzer._analyze_generate_field_answer_functions",
      "form_filler_cache_analytics._parse_response",
      "personal_info_extractor_optimized.split_documents_optimized",
      "test_session_api.test_browser_extension_flow",
      "document_service.update_resume_status",
      "test_url_tracking_api.test_get_stats",
      "auth.get_optional_user_id",
      "form_filler.__init__",
      "document_service.log_processing_complete",
      "verify_deep_tracking.main",
      "vector_store.delete_document",
      "integrated_usage_analyzer._save_to_database",
      "test_end_to_end._create_sample_personal_info",
      "form_filler_optimized.calculate_satisfaction_score",
      "main.get_smart_llm_service",
      "test_url_tracking_api.register_and_login",
      "usage_decorators.tracked_init",
      "document_service.__init__",
      "personal_info_extractor_optimized.create_embeddings_optimized",
      "text_extractor.extract_from_docx",
      "test_session_api.test_simple_session_flow",
      "integrated_usage_analyzer._save_execution_trace_to_db",
      "resume_extractor_db.save_to_vectordb",
      "test_realtime_monitoring.simulate_activity",
      "auth.get_current_user",
      "detailed_code_analysis._analyze_usage_patterns",
      "conftest.api_base_url",
      "document_service._get_file_extension",
      "demo_chunking_example.chunk_text_smart",
      "form_filler_optimized._get_search_queries",
      "test_ctrl_c_scenario.simulate_api_call",
      "conftest.temp_db",
      "embedding_service._chunk_text_smart",
      "test_realtime_monitoring.signal_handler",
      "postgres_service.get_all_forms",
      "auto_tracker._create_class_wrapper",
      "test_sample_pytest.test_unix_specific",
      "realtime_usage_analyzer._analyze_database_data",
      "migrate_files_to_db.migrate_personal_info_files",
      "final_test_summary.print_summary",
      "test_sample_pytest.teardown_method",
      "resume_extractor_optimized._get_document_hash",
      "demo_function_class_tracking.process_batch",
      "simple_function_tracker.track_class",
      "test_monitor_command.background_task_1",
      "integrated_usage_analyzer._background_monitor",
      "resume_extractor_optimized.process_resume_optimized",
      "form_filler_optimized.extract_answer_from_tier1",
      "resume_extractor_optimized.create_faiss_vectorstore_optimized",
      "form_filler_cache_analytics._create_prompt",
      "personal_info_extractor_optimized.load_personal_info_from_database_optimized",
      "personal_info_extractor_db.__init__",
      "run_all_tests.check_server_health",
      "run_all_tests.run_coverage_report",
      "personal_info_extractor_optimized.main",
      "vector_store.get_document_stats",
      "test_personal_info_chunking.test_personal_info_chunking",
      "test_vector_api.get_personal_info_status",
      "personal_info_extractor_optimized._get_document_hash",
      "demo_function_class_tracking.get_user",
      "migrate_resume_table.table_exists",
      "resume_extractor_db.__init__",
      "embedding_service.search_similar",
      "conftest.test_form_fields",
      "test_ctrl_c_scenario.main",
      "integrated_usage_analyzer._setup_logging",
      "integrated_usage_analyzer._identify_bottlenecks",
      "run_tests.stop_server",
      "performance_monitor.print_report",
      "deploy.install_dependencies",
      "demo_function_class_tracking.create_user",
      "test_vector_api.main",
      "test_extension_api.test_api_health",
      "conftest.start_timer",
      "document_service.get_user_resume",
      "demo_deep_tracking.memory_intensive_function",
      "conftest.get",
      "demo_function_class_tracking.run_mixed_usage_demo",
      "simple_function_tracker.create_method_wrapper",
      "migrate_personal_info_schema.migrate_personal_info_schema",
      "auto_tracker.disable",
      "auto_tracker.format_constructor_args",
      "test_sample_pytest.test_expected_failure",
      "demo_deep_tracking.run_demo",
      "conftest.__init__",
      "document_service.save_resume_document",
      "personal_info_extractor_db.main",
      "auto_tracker._create_function_wrapper",
      "conftest.test_report_data",
      "resume_extractor_optimized.document_service",
      "deploy.setup_environment",
      "resume_extractor_db.main",
      "document_service.cleanup_temp_file",
      "embedding_service.__init__",
      "resume_extractor_db.load_resume_from_database",
      "test_manual_monitor_simulation.mock_data_processing",
      "test_vector_api.search_resume",
      "auto_tracker._patch_modules",
      "realtime_usage_analyzer._analyze_python_file",
      "demo_function_class_tracking.update_user",
      "auth.verify_token",
      "run_tests.is_server_running",
      "demo_analyzer.main",
      "migrate_resume_table.migrate",
      "document_service.update_personal_info_status",
      "test_extension_api.test_save_current_page",
      "url_tracking_service.get_db_session",
      "personal_info_extractor_optimized.create_faiss_vectorstore_optimized",
      "llm_service.clear_stats",
      "auto_tracker._should_patch_class",
      "test_sample_pytest.test_memory_usage",
      "realtime_usage_analyzer.analyze_endpoint_function_usage",
      "performance_monitor.generate_report",
      "form_filler_optimized._generate_resume_search_queries",
      "form_filler_optimized._calculate_performance_improvement",
      "document_service.log_processing_error",
      "detailed_code_analysis.generate_report",
      "form_filler_optimized._get_resume_extractor",
      "embedding_service.health_check",
      "quick_test.generate_test_activity",
      "form_filler_optimized.clear_cache",
      "test_upload_api.test_demo_personal_info_upload",
      "integrated_usage_analyzer._calculate_max_dependency_depth",
      "form_filler_cache_analytics._generate_search_queries",
      "performance_monitor.measure_endpoint",
      "auto_tracker._patch_module",
      "detailed_code_analysis.get_unused_classes",
      "personal_info_extractor_optimized._init_embedding_provider",
      "test_url_tracking_api.test_update_status",
      "resume_extractor_optimized.get_performance_metrics",
      "detailed_code_analysis.main",
      "form_filler_optimized._get_personal_info_extractor",
      "simple_function_tracker.track_service_call",
      "test_url_tracking_api.run_all_tests",
      "realtime_usage_analyzer.setup_logging",
      "test_vector_api.reembed_personal_info",
      "demo_deep_tracking.process_user_data",
      "integrated_usage_analyzer.end_request_trace",
      "test_personal_info_chunking.test_contact_info_specific",
      "auto_tracker.enable",
      "test_sample_pytest.test_mock_service",
      "detailed_code_analysis._analyze_imports",
      "conftest.test_db_url",
      "main.get_form_filler",
      "performance_monitor.__init__",
      "integrated_usage_analyzer.__init__",
      "conftest.api_client",
      "integrated_usage_analyzer.record_request",
      "performance_monitor.run_performance_test",
      "personal_info_extractor_db.create_embeddings_with_langchain",
      "auto_tracker._unpatch_modules",
      "realtime_usage_analyzer.get_depth",
      "document_service.get_session",
      "llm_service.should_continue",
      "postgres_service.mark_form_applied",
      "test_monitor_command.generate_background_activity",
      "usage_decorators.track_service_class",
      "usage_decorators.wrapper",
      "conftest.mock_redis",
      "integrated_usage_analyzer.start_analysis",
      "usage_decorators._format_args",
      "llm_service.search_resume_data",
      "personal_info_extractor_db.load_personal_info_from_database",
      "integrated_usage_analyzer._build_call_tree",
      "conftest.pytest_runtest_makereport",
      "auto_tracker.get_auto_tracker",
      "demo_function_class_tracking.__init__",
      "personal_info_extractor_optimized.clear_cache",
      "integrated_usage_analyzer._analyze_generate_field_answer_functions",
      "auto_tracker._create_method_wrapper",
      "integrated_usage_analyzer.start_request_trace",
      "resume_extractor_optimized.split_documents_optimized",
      "url_tracking_service.delete_url",
      "main.get_session_user",
      "test_end_to_end.generate_final_report",
      "demo_function_class_tracking.run_class_demos",
      "conftest.mock_embedding_service",
      "main.extract_text_from_bytes",
      "simple_function_tracker.track_method_call",
      "auto_tracker.__init__",
      "conftest.sample_personal_info_text",
      "test_personal_info_chunking.count_complete_sections",
      "conftest.mock_llm_service",
      "test_extension_api.test_user_registration",
      "quick_test.test_function_fast",
      "llm_service._clean_answer",
      "test_extension_api.test_session_creation",
      "test_sample_pytest.test_slow_operation",
      "simple_function_tracker.get_analyzer",
      "test_vector_api.print_json",
      "resume_extractor_db.split_documents",
      "detailed_code_analysis.__init__",
      "test_import_verification.test_imports",
      "resume_extractor_optimized.create_embeddings_optimized"
    ],
    "classes": [
      "api.HealthResponse",
      "user_models.UserToken",
      "form_filler_optimized.OptimizedFormFiller",
      "performance_monitor.PerformanceMonitor",
      "test_sample_pytest.TestSampleSlow",
      "main.UserRegister",
      "test_main_comprehensive.ComprehensiveApiTester",
      "final_test_summary.FinalTestSuite",
      "llm_service.ResumeSearchInput",
      "schemas.SaveUrlRequest",
      "llm_service.SmartLLMService",
      "auto_tracker.TrackedClass",
      "test_sample_pytest.TestSampleAsync",
      "integrated_usage_analyzer.DeepTrackingMiddleware",
      "performance_monitor.PerformanceMetric",
      "main.SessionResponse",
      "usage_middleware.UsageAnalysisMiddleware",
      "schemas.FormResponse",
      "models.UserToken",
      "resume_extractor_optimized.ResumeExtractorOptimized",
      "schemas.Config",
      "main.SessionCreateRequest",
      "main.FieldAnswerResponse",
      "main.UpdateSessionResponse",
      "schemas.FormFieldSchema",
      "test_sample_pytest.TestSampleIntegration",
      "personal_info_extractor_db.PersonalInfoExtractorDB",
      "llm_service.PersonalInfoSearchInput",
      "auto_tracker.AutoTracker",
      "run_all_tests.PytestTestRunner",
      "schemas.TrackedUrlsListResponse",
      "test_url_tracking_api.URLTrackingAPITest",
      "url_tracking_service.UrlTrackingService",
      "personal_info_extractor_optimized.PersonalInfoExtractorOptimized",
      "api.FormAnalysisResponse",
      "schemas.HealthResponse",
      "user_models.User",
      "realtime_usage_analyzer.RealTimeUsageAnalyzer",
      "models.FormDb",
      "conftest.APIClient",
      "models.Config",
      "demo_function_class_tracking.UserService",
      "main.RedisWorkflowTestResponse",
      "main.CurrentUserResponse",
      "vector_store.RedisVectorStore",
      "models.TrackedUrl",
      "test_sample_pytest.TestModuleFixture",
      "form_filler_cache_analytics.FormFillerWithCacheAnalytics",
      "document_models.DocumentProcessingLog",
      "integrated_usage_analyzer.FunctionUsage",
      "demo_function_class_tracking.DataProcessor",
      "integrated_usage_analyzer.DetailedFunctionCall",
      "schemas.DetailedFormAnalysisResponse",
      "models.User",
      "main.SimpleRegisterResponse",
      "main.DocumentInfoResponse",
      "schemas.UpdateUrlStatusRequest",
      "schemas.TrackedUrlResponse",
      "detailed_code_analysis.DetailedCodeAnalyzer",
      "realtime_usage_analyzer.EndpointUsage",
      "integrated_usage_analyzer.EndpointExecutionTrace",
      "test_end_to_end.EndToEndTestSuite",
      "document_models.ResumeDocument",
      "realtime_usage_analyzer.EndpointFunctionTrace",
      "conftest.PerformanceTracker",
      "test_vector_api.VectorDBAPITester",
      "document_models.PersonalInfoDocument",
      "llm_service.AgentState",
      "test_sample_pytest.TestWithSetupTeardown",
      "postgres_service.PostgresService",
      "main.ReembedResponse",
      "integrated_usage_analyzer.EndpointUsage",
      "integrated_usage_analyzer.ClassUsage",
      "models.FormField",
      "main.FieldAnswerRequest",
      "postgres_service.FormTable",
      "main.DocumentUploadResponse",
      "resume_extractor_db.ResumeExtractorDB",
      "test_extension_api.ExtensionAPITest",
      "main.UserLogin",
      "schemas.FormAnalysisResponse",
      "integrated_usage_analyzer.IntegratedUsageAnalyzer",
      "test_main_comprehensive.MainPyAnalyzer",
      "test_sample_pytest.TestSampleUnit",
      "models.UserSession",
      "api.FormAnalysisRequest",
      "schemas.FormAnalysisRequest",
      "models.PostgresResult",
      "api.DocumentStatusResponse",
      "form_filler.FormFiller",
      "cache_analytics_demo.CacheAnalyticsDemo",
      "document_service.DocumentService",
      "embedding_service.EmbeddingService"
    ],
    "endpoints": []
  }
}