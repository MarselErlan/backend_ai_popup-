[tool:pytest]
# Test discovery and execution settings
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
testpaths = tests

# Test markers for categorization and filtering
markers =
    unit: Unit level tests for individual components
    integration: API or database integration tests  
    e2e: Full stack end-to-end workflow tests
    performance: Performance and load testing
    analysis: Code analysis and quality tests
    slow: Tests that take longer than 5 seconds
    api: Tests that require running API server
    redis: Tests that require Redis connection
    db: Tests that require database connection

# Output and reporting settings
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=10
    --durations=10
    --color=yes
    --junit-xml=tests/reports/junit.xml
    --html=tests/reports/pytest_report.html
    --self-contained-html

# Coverage settings (when using --cov)
# pytest --cov=app --cov-report=html --cov-report=term
# All coverage reports will be saved in tests/reports/ directory

# Minimum version requirements
minversion = 6.0

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Timeout settings (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Parallel execution settings (requires pytest-xdist)
# Run with: pytest -n auto
# addopts = -n auto

# Test collection settings
collect_ignore = 
    setup.py
    venv
    __pycache__
    .git
    build
    dist

# Log settings for debugging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Async test settings (requires pytest-asyncio)
asyncio_mode = auto 